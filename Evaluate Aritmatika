#include <iostream>
#include <stack>
#include <string>
#include <vector>
#include <cctype>

using namespace std;

int precedence(char op) {
    return (op == '+' || op == '-') ? 1 : (op == '*' || op == '/' || op == '%') ? 2 : 0;
}

vector<string> tokenize(const string& expr) {
    vector<string> tokens;
    for (size_t i = 0; i < expr.size(); ++i) {
        if (isdigit(expr[i]) || (expr[i] == '-' && (i == 0 || !isdigit(expr[i-1])))) {
            string num;
            if (expr[i] == '-') num += expr[i++];
            while (i < expr.size() && isdigit(expr[i])) num += expr[i++];
            tokens.push_back(num);
            --i;
        } else if (!isspace(expr[i])) {
            tokens.push_back(string(1, expr[i]));
        }
    }
    return tokens;
}

vector<string> infixToPostfix(const string& expr) {
    vector<string> tokens = tokenize(expr);
    stack<string> ops;
    vector<string> output;

    for (const string& token : tokens) {
        if (isdigit(token[0]) || (token[0] == '-' && token.size() > 1)) {
            output.push_back(token);
        } else if (token == "(") {
            ops.push(token);
        } else if (token == ")") {
            while (!ops.empty() && ops.top() != "(") {
                output.push_back(ops.top());
                ops.pop();
            }
            ops.pop();
        } else {
            while (!ops.empty() && precedence(ops.top()[0]) >= precedence(token[0])) {
                output.push_back(ops.top());
                ops.pop();
            }
            ops.push(token);
        }
    }

    while (!ops.empty()) {
        output.push_back(ops.top());
        ops.pop();
    }

    return output;
}

int evaluatePostfix(const vector<string>& postfix) {
    stack<int> values;
    for (const string& token : postfix) {
        if (isdigit(token[0]) || (token[0] == '-' && token.size() > 1)) {
            values.push(stoi(token));
        } else {
            int b = values.top(); values.pop();
            int a = values.top(); values.pop();
            switch (token[0]) {
                case '+': values.push(a + b); break;
                case '-': values.push(a - b); break;
                case '*': values.push(a * b); break;
                case '/': values.push(a / b); break;
                case '%': values.push(a % b); break;
            }
        }
    }
    return values.top();
}

int main() {
    string expr;
    getline(cin, expr);

    vector<string> postfix = infixToPostfix(expr);
    cout << evaluatePostfix(postfix) << endl;

    return 0;
}
